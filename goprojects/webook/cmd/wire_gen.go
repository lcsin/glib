// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/lcsin/webook/internal/handler"
	"github.com/lcsin/webook/internal/repository"
	"github.com/lcsin/webook/internal/repository/cache"
	"github.com/lcsin/webook/internal/repository/dao"
	"github.com/lcsin/webook/internal/service"
	"github.com/lcsin/webook/ioc"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	v := handler.InitMiddlewares()
	db := ioc.InitDB()
	iUserDAO := dao.NewUserDAO(db)
	cmdable := ioc.InitRedis()
	iUserCache := cache.NewUserCache(cmdable)
	iUserRepository := repository.NewUserRepository(iUserDAO, iUserCache)
	iUserService := service.NewUserService(iUserRepository)
	userHandler := handler.NewUserHandler(iUserService)
	iArticleWriterDAO := dao.NewArticleWriterDAO(db)
	iArticleReaderDAO := dao.NewArticleReaderDAO(db)
	iArticleRepository := repository.NewArticleRepository(iArticleWriterDAO, iArticleReaderDAO, iUserDAO)
	iArticleService := service.NewArticleService(iArticleRepository)
	articleHandler := handler.NewArticleHandler(iArticleService)
	v2 := handler.InitHandlers(userHandler, articleHandler)
	engine := ioc.InitRouter(v, v2)
	return engine
}

// 初始化测试用的articleHandler
func InitTestArticleHandler() *handler.ArticleHandler {
	db := ioc.InitTestDB()
	iArticleWriterDAO := dao.NewArticleWriterDAO(db)
	iArticleReaderDAO := dao.NewArticleReaderDAO(db)
	iUserDAO := dao.NewUserDAO(db)
	iArticleRepository := repository.NewArticleRepository(iArticleWriterDAO, iArticleReaderDAO, iUserDAO)
	iArticleService := service.NewArticleService(iArticleRepository)
	articleHandler := handler.NewArticleHandler(iArticleService)
	return articleHandler
}

// wire.go:

// 第三方依赖注入
var thirdProvider = wire.NewSet(ioc.InitDB, ioc.InitRedis, ioc.InitRouter, handler.InitHandlers, handler.InitMiddlewares)

// userHandler依赖注入
var userHandlerProvider = wire.NewSet(dao.NewUserDAO, cache.NewUserCache, repository.NewUserRepository, service.NewUserService, handler.NewUserHandler)

// articleHandler依赖注入
var articleHandlerProvider = wire.NewSet(dao.NewArticleWriterDAO, dao.NewArticleReaderDAO, repository.NewArticleRepository, service.NewArticleService, handler.NewArticleHandler)
